{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useServerStatus = () => {\n  _s();\n  const [isServerOnline, setIsServerOnline] = useState(true);\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n  const checkServerStatus = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/health`, {\n        method: 'GET',\n        timeout: 5000\n      });\n      if (response.ok) {\n        setIsServerOnline(true);\n      } else {\n        setIsServerOnline(false);\n      }\n    } catch (error) {\n      console.error('Server status check failed:', error);\n      setIsServerOnline(false);\n    }\n  };\n  useEffect(() => {\n    // التحقق من حالة السيرفر كل دقيقتين (120 ثانية)\n    const interval = setInterval(checkServerStatus, 120000);\n\n    // التحقق الأولي\n    checkServerStatus();\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    isServerOnline,\n    checkServerStatus\n  };\n};\n_s(useServerStatus, \"1MmqMHuCFJosisAYQwcfFT+1ikU=\");\nexport default useServerStatus;","map":{"version":3,"names":["useState","useEffect","useServerStatus","_s","isServerOnline","setIsServerOnline","API_BASE_URL","process","env","REACT_APP_API_URL","checkServerStatus","response","fetch","method","timeout","ok","error","console","interval","setInterval","clearInterval"],"sources":["C:/Users/PC/Desktop/hassana dashboard/client/src/hooks/useServerStatus.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useServerStatus = () => {\r\n  const [isServerOnline, setIsServerOnline] = useState(true);\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n\r\n  const checkServerStatus = async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/health`, {\r\n        method: 'GET',\r\n        timeout: 5000\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setIsServerOnline(true);\r\n      } else {\r\n        setIsServerOnline(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Server status check failed:', error);\r\n      setIsServerOnline(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // التحقق من حالة السيرفر كل دقيقتين (120 ثانية)\r\n    const interval = setInterval(checkServerStatus, 120000);\r\n    \r\n    // التحقق الأولي\r\n    checkServerStatus();\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { isServerOnline, checkServerStatus };\r\n};\r\n\r\nexport default useServerStatus;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAMM,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EAE7E,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,aAAa,EAAE;QACzDO,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfV,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,MAAM;QACLA,iBAAiB,CAAC,KAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDX,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAEDJ,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,QAAQ,GAAGC,WAAW,CAACT,iBAAiB,EAAE,MAAM,CAAC;;IAEvD;IACAA,iBAAiB,CAAC,CAAC;IAEnB,OAAO,MAAMU,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEd,cAAc;IAAEM;EAAkB,CAAC;AAC9C,CAAC;AAACP,EAAA,CAjCID,eAAe;AAmCrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}