{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst isBuffer = require('../../predicate/isBuffer.js');\nconst isPrototype = require('../_internal/isPrototype.js');\nconst isArrayLike = require('../predicate/isArrayLike.js');\nconst isTypedArray = require('../predicate/isTypedArray.js');\nconst times = require('../util/times.js');\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  switch (typeof object) {\n    case 'object':\n    case 'function':\n      {\n        if (isArrayLike.isArrayLike(object)) {\n          return arrayLikeKeysIn(object);\n        }\n        if (isPrototype.isPrototype(object)) {\n          return prototypeKeysIn(object);\n        }\n        return keysInImpl(object);\n      }\n    default:\n      {\n        return keysInImpl(Object(object));\n      }\n  }\n}\nfunction keysInImpl(object) {\n  const result = [];\n  for (const key in object) {\n    result.push(key);\n  }\n  return result;\n}\nfunction prototypeKeysIn(object) {\n  const keys = keysInImpl(object);\n  return keys.filter(key => key !== 'constructor');\n}\nfunction arrayLikeKeysIn(object) {\n  const indices = times.times(object.length, index => `${index}`);\n  const filteredKeys = new Set(indices);\n  if (isBuffer.isBuffer(object)) {\n    filteredKeys.add('offset');\n    filteredKeys.add('parent');\n  }\n  if (isTypedArray.isTypedArray(object)) {\n    filteredKeys.add('buffer');\n    filteredKeys.add('byteLength');\n    filteredKeys.add('byteOffset');\n  }\n  return [...indices, ...keysInImpl(object).filter(key => !filteredKeys.has(key))];\n}\nexports.keysIn = keysIn;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}