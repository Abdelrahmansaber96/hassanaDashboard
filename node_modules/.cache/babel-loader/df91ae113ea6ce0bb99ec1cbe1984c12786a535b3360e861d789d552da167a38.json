{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useServerStatus = () => {\n  _s();\n  const [isServerOnline, setIsServerOnline] = useState(true);\n  const [lastCheck, setLastCheck] = useState(new Date());\n  const checkServerStatus = async () => {\n    try {\n      const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n      const response = await fetch(`${API_BASE_URL}/api/health`, {\n        method: 'GET',\n        timeout: 5000 // 5 seconds timeout\n      });\n      if (response.ok) {\n        setIsServerOnline(true);\n      } else {\n        setIsServerOnline(false);\n      }\n    } catch (error) {\n      console.warn('Server health check failed:', error);\n      setIsServerOnline(false);\n    }\n    setLastCheck(new Date());\n  };\n  useEffect(() => {\n    // التحقق الأولي\n    checkServerStatus();\n\n    // التحقق كل 30 ثانية\n    const interval = setInterval(checkServerStatus, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    isServerOnline,\n    lastCheck,\n    checkServerStatus\n  };\n};\n_s(useServerStatus, \"RZf/u4+IbAikfXuYc70F603R4fs=\");\nexport default useServerStatus;","map":{"version":3,"names":["useState","useEffect","useServerStatus","_s","isServerOnline","setIsServerOnline","lastCheck","setLastCheck","Date","checkServerStatus","API_BASE_URL","process","env","REACT_APP_API_URL","response","fetch","method","timeout","ok","error","console","warn","interval","setInterval","clearInterval"],"sources":["C:/Users/PC/Desktop/clinic dashboard/client/src/hooks/useServerStatus.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useServerStatus = () => {\r\n  const [isServerOnline, setIsServerOnline] = useState(true);\r\n  const [lastCheck, setLastCheck] = useState(new Date());\r\n\r\n  const checkServerStatus = async () => {\r\n    try {\r\n      const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n      const response = await fetch(`${API_BASE_URL}/api/health`, {\r\n        method: 'GET',\r\n        timeout: 5000, // 5 seconds timeout\r\n      });\r\n      \r\n      if (response.ok) {\r\n        setIsServerOnline(true);\r\n      } else {\r\n        setIsServerOnline(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Server health check failed:', error);\r\n      setIsServerOnline(false);\r\n    }\r\n    setLastCheck(new Date());\r\n  };\r\n\r\n  useEffect(() => {\r\n    // التحقق الأولي\r\n    checkServerStatus();\r\n\r\n    // التحقق كل 30 ثانية\r\n    const interval = setInterval(checkServerStatus, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return {\r\n    isServerOnline,\r\n    lastCheck,\r\n    checkServerStatus\r\n  };\r\n};\r\n\r\nexport default useServerStatus;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAIQ,IAAI,CAAC,CAAC,CAAC;EAEtD,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;MAC7E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,aAAa,EAAE;QACzDM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,IAAI,CAAE;MACjB,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfb,iBAAiB,CAAC,IAAI,CAAC;MACzB,CAAC,MAAM;QACLA,iBAAiB,CAAC,KAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,6BAA6B,EAAEF,KAAK,CAAC;MAClDd,iBAAiB,CAAC,KAAK,CAAC;IAC1B;IACAE,YAAY,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;EAEDP,SAAS,CAAC,MAAM;IACd;IACAQ,iBAAiB,CAAC,CAAC;;IAEnB;IACA,MAAMa,QAAQ,GAAGC,WAAW,CAACd,iBAAiB,EAAE,KAAK,CAAC;IAEtD,OAAO,MAAMe,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLlB,cAAc;IACdE,SAAS;IACTG;EACF,CAAC;AACH,CAAC;AAACN,EAAA,CAvCWD,eAAe;AAyC5B,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}