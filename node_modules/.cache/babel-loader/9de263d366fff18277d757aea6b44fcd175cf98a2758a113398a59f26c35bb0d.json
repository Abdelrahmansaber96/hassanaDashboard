{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst cloneDeepWith = require('./cloneDeepWith.js');\nconst keysIn = require('./keysIn.js');\nconst unset = require('./unset.js');\nconst getSymbolsIn = require('../_internal/getSymbolsIn.js');\nconst isDeepKey = require('../_internal/isDeepKey.js');\nconst flatten = require('../array/flatten.js');\nconst isPlainObject = require('../predicate/isPlainObject.js');\nfunction omit(obj, ...keysArr) {\n  if (obj == null) {\n    return {};\n  }\n  keysArr = flatten.flatten(keysArr);\n  const result = cloneInOmit(obj, keysArr);\n  for (let i = 0; i < keysArr.length; i++) {\n    let keys = keysArr[i];\n    switch (typeof keys) {\n      case 'object':\n        {\n          if (!Array.isArray(keys)) {\n            keys = Array.from(keys);\n          }\n          for (let j = 0; j < keys.length; j++) {\n            const key = keys[j];\n            unset.unset(result, key);\n          }\n          break;\n        }\n      case 'string':\n      case 'symbol':\n      case 'number':\n        {\n          unset.unset(result, keys);\n          break;\n        }\n    }\n  }\n  return result;\n}\nfunction cloneInOmit(obj, keys) {\n  const hasDeepKey = keys.some(key => Array.isArray(key) || isDeepKey.isDeepKey(key));\n  if (hasDeepKey) {\n    return deepCloneInOmit(obj);\n  }\n  return shallowCloneInOmit(obj);\n}\nfunction shallowCloneInOmit(obj) {\n  const result = {};\n  const keysToCopy = [...keysIn.keysIn(obj), ...getSymbolsIn.getSymbolsIn(obj)];\n  for (let i = 0; i < keysToCopy.length; i++) {\n    const key = keysToCopy[i];\n    result[key] = obj[key];\n  }\n  return result;\n}\nfunction deepCloneInOmit(obj) {\n  const result = {};\n  const keysToCopy = [...keysIn.keysIn(obj), ...getSymbolsIn.getSymbolsIn(obj)];\n  for (let i = 0; i < keysToCopy.length; i++) {\n    const key = keysToCopy[i];\n    result[key] = cloneDeepWith.cloneDeepWith(obj[key], valueToClone => {\n      if (isPlainObject.isPlainObject(valueToClone)) {\n        return undefined;\n      }\n      return valueToClone;\n    });\n  }\n  return result;\n}\nexports.omit = omit;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}