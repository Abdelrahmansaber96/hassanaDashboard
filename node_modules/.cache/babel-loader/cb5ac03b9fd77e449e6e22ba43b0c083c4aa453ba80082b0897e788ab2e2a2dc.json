{"ast":null,"code":"var _excluded = [\"axisLine\", \"width\", \"height\", \"className\", \"hide\", \"ticks\"],\n  _excluded2 = [\"viewBox\"],\n  _excluded3 = [\"viewBox\"];\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * @fileOverview Cartesian Axis\n */\nimport * as React from 'react';\nimport { useState, useRef, useCallback, forwardRef, useImperativeHandle } from 'react';\nimport get from 'es-toolkit/compat/get';\nimport { clsx } from 'clsx';\nimport { shallowEqual } from '../util/ShallowEqual';\nimport { Layer } from '../container/Layer';\nimport { Text } from '../component/Text';\nimport { CartesianLabelContextProvider, CartesianLabelFromLabelProp } from '../component/Label';\nimport { isNumber } from '../util/DataUtils';\nimport { adaptEventsOfChild } from '../util/types';\nimport { filterProps } from '../util/ReactUtils';\nimport { getTicks } from './getTicks';\nimport { svgPropertiesNoEvents } from '../util/svgPropertiesNoEvents';\nimport { getCalculatedYAxisWidth } from '../util/YAxisUtils';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\n\n/** The orientation of the axis in correspondence to the chart */\n\n/** A unit to be appended to a value */\n\n/** The formatter function of tick */\n\nexport var defaultCartesianAxisProps = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  viewBox: {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n  // The orientation of axis\n  orientation: 'bottom',\n  // The ticks\n  ticks: [],\n  stroke: '#666',\n  tickLine: true,\n  axisLine: true,\n  tick: true,\n  mirror: false,\n  minTickGap: 5,\n  // The width or height of tick\n  tickSize: 6,\n  tickMargin: 2,\n  interval: 'preserveEnd'\n};\n\n/*\n * `viewBox` and `scale` are SVG attributes.\n * Recharts however - unfortunately - has its own attributes named `viewBox` and `scale`\n * that are completely different data shape and different purpose.\n */\n\nfunction AxisLine(axisLineProps) {\n  var {\n    x,\n    y,\n    width,\n    height,\n    orientation,\n    mirror,\n    axisLine,\n    otherSvgProps\n  } = axisLineProps;\n  if (!axisLine) {\n    return null;\n  }\n  var props = _objectSpread(_objectSpread(_objectSpread({}, otherSvgProps), filterProps(axisLine, false)), {}, {\n    fill: 'none'\n  });\n  if (orientation === 'top' || orientation === 'bottom') {\n    var needHeight = +(orientation === 'top' && !mirror || orientation === 'bottom' && mirror);\n    props = _objectSpread(_objectSpread({}, props), {}, {\n      x1: x,\n      y1: y + needHeight * height,\n      x2: x + width,\n      y2: y + needHeight * height\n    });\n  } else {\n    var needWidth = +(orientation === 'left' && !mirror || orientation === 'right' && mirror);\n    props = _objectSpread(_objectSpread({}, props), {}, {\n      x1: x + needWidth * width,\n      y1: y,\n      x2: x + needWidth * width,\n      y2: y + height\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"line\", _extends({}, props, {\n    className: clsx('recharts-cartesian-axis-line', get(axisLine, 'className'))\n  }));\n}\n\n/**\n * Calculate the coordinates of endpoints in ticks.\n * @param data The data of a simple tick.\n * @param x The x-coordinate of the axis.\n * @param y The y-coordinate of the axis.\n * @param width The width of the axis.\n * @param height The height of the axis.\n * @param orientation The orientation of the axis.\n * @param tickSize The length of the tick line.\n * @param mirror If true, the ticks are mirrored.\n * @param tickMargin The margin between the tick line and the tick text.\n * @returns An object with `line` and `tick` coordinates.\n * `line` is the coordinates for the tick line, and `tick` is the coordinate for the tick text.\n */\nfunction getTickLineCoord(data, x, y, width, height, orientation, tickSize, mirror, tickMargin) {\n  var x1, x2, y1, y2, tx, ty;\n  var sign = mirror ? -1 : 1;\n  var finalTickSize = data.tickSize || tickSize;\n  var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;\n  switch (orientation) {\n    case 'top':\n      x1 = x2 = data.coordinate;\n      y2 = y + +!mirror * height;\n      y1 = y2 - sign * finalTickSize;\n      ty = y1 - sign * tickMargin;\n      tx = tickCoord;\n      break;\n    case 'left':\n      y1 = y2 = data.coordinate;\n      x2 = x + +!mirror * width;\n      x1 = x2 - sign * finalTickSize;\n      tx = x1 - sign * tickMargin;\n      ty = tickCoord;\n      break;\n    case 'right':\n      y1 = y2 = data.coordinate;\n      x2 = x + +mirror * width;\n      x1 = x2 + sign * finalTickSize;\n      tx = x1 + sign * tickMargin;\n      ty = tickCoord;\n      break;\n    default:\n      x1 = x2 = data.coordinate;\n      y2 = y + +mirror * height;\n      y1 = y2 + sign * finalTickSize;\n      ty = y1 + sign * tickMargin;\n      tx = tickCoord;\n      break;\n  }\n  return {\n    line: {\n      x1,\n      y1,\n      x2,\n      y2\n    },\n    tick: {\n      x: tx,\n      y: ty\n    }\n  };\n}\n\n/**\n * @param orientation The orientation of the axis.\n * @param mirror If true, the ticks are mirrored.\n * @returns The text anchor of the tick.\n */\nfunction getTickTextAnchor(orientation, mirror) {\n  switch (orientation) {\n    case 'left':\n      return mirror ? 'start' : 'end';\n    case 'right':\n      return mirror ? 'end' : 'start';\n    default:\n      return 'middle';\n  }\n}\n\n/**\n * @param orientation The orientation of the axis.\n * @param mirror If true, the ticks are mirrored.\n * @returns The vertical text anchor of the tick.\n */\nfunction getTickVerticalAnchor(orientation, mirror) {\n  switch (orientation) {\n    case 'left':\n    case 'right':\n      return 'middle';\n    case 'top':\n      return mirror ? 'start' : 'end';\n    default:\n      return mirror ? 'end' : 'start';\n  }\n}\nfunction TickItem(props) {\n  var {\n    option,\n    tickProps,\n    value\n  } = props;\n  var tickItem;\n  var combinedClassName = clsx(tickProps.className, 'recharts-cartesian-axis-tick-value');\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    // @ts-expect-error element cloning is not typed\n    tickItem = /*#__PURE__*/React.cloneElement(option, _objectSpread(_objectSpread({}, tickProps), {}, {\n      className: combinedClassName\n    }));\n  } else if (typeof option === 'function') {\n    tickItem = option(_objectSpread(_objectSpread({}, tickProps), {}, {\n      className: combinedClassName\n    }));\n  } else {\n    var className = 'recharts-cartesian-axis-tick-value';\n    if (typeof option !== 'boolean') {\n      className = clsx(className, option === null || option === void 0 ? void 0 : option.className);\n    }\n    tickItem = /*#__PURE__*/React.createElement(Text, _extends({}, tickProps, {\n      className: className\n    }), value);\n  }\n  return tickItem;\n}\nfunction Ticks(props) {\n  var {\n    ticks = [],\n    tick,\n    tickLine,\n    stroke,\n    tickFormatter,\n    unit,\n    padding,\n    tickTextProps,\n    orientation,\n    mirror,\n    x,\n    y,\n    width,\n    height,\n    tickSize,\n    tickMargin,\n    fontSize,\n    letterSpacing,\n    getTicksConfig,\n    events\n  } = props;\n  // @ts-expect-error some properties are optional in props but required in getTicks\n  var finalTicks = getTicks(_objectSpread(_objectSpread({}, getTicksConfig), {}, {\n    ticks\n  }), fontSize, letterSpacing);\n  var textAnchor = getTickTextAnchor(orientation, mirror);\n  var verticalAnchor = getTickVerticalAnchor(orientation, mirror);\n  var axisProps = svgPropertiesNoEvents(getTicksConfig);\n  var customTickProps = filterProps(tick, false);\n  var tickLineProps = _objectSpread(_objectSpread({}, axisProps), {}, {\n    fill: 'none'\n  }, filterProps(tickLine, false));\n  var items = finalTicks.map((entry, i) => {\n    var {\n      line: lineCoord,\n      tick: tickCoord\n    } = getTickLineCoord(entry, x, y, width, height, orientation, tickSize, mirror, tickMargin);\n    var tickProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      // @ts-expect-error textAnchor from axisProps is typed as `string` but Text wants type `TextAnchor`\n      textAnchor,\n      verticalAnchor\n    }, axisProps), {}, {\n      stroke: 'none',\n      fill: stroke\n    }, customTickProps), tickCoord), {}, {\n      index: i,\n      payload: entry,\n      visibleTicksCount: finalTicks.length,\n      tickFormatter,\n      padding\n    }, tickTextProps);\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: \"recharts-cartesian-axis-tick\",\n      key: \"tick-\".concat(entry.value, \"-\").concat(entry.coordinate, \"-\").concat(entry.tickCoord)\n    }, adaptEventsOfChild(events, entry, i)), tickLine && /*#__PURE__*/\n    // @ts-expect-error recharts scale is not compatible with SVG scale\n    React.createElement(\"line\", _extends({}, tickLineProps, lineCoord, {\n      className: clsx('recharts-cartesian-axis-tick-line', get(tickLine, 'className'))\n    })), tick && /*#__PURE__*/React.createElement(TickItem, {\n      option: tick,\n      tickProps: tickProps,\n      value: \"\".concat(typeof tickFormatter === 'function' ? tickFormatter(entry.value, i) : entry.value).concat(unit || '')\n    }));\n  });\n  if (items.length > 0) {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"recharts-cartesian-axis-ticks\"\n    }, items);\n  }\n  return null;\n}\nvar CartesianAxisComponent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n      axisLine,\n      width,\n      height,\n      className,\n      hide,\n      ticks\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  var [fontSize, setFontSize] = useState('');\n  var [letterSpacing, setLetterSpacing] = useState('');\n  var tickRefs = useRef([]);\n  useImperativeHandle(ref, () => ({\n    getCalculatedWidth: () => {\n      var _props$labelRef;\n      return getCalculatedYAxisWidth({\n        ticks: tickRefs.current,\n        label: (_props$labelRef = props.labelRef) === null || _props$labelRef === void 0 ? void 0 : _props$labelRef.current,\n        labelGapWithTick: 5,\n        tickSize: props.tickSize,\n        tickMargin: props.tickMargin\n      });\n    }\n  }));\n  var layerRef = useCallback(el => {\n    if (el) {\n      var tickNodes = el.getElementsByClassName('recharts-cartesian-axis-tick-value');\n      tickRefs.current = Array.from(tickNodes);\n      var tick = tickNodes[0];\n      if (tick) {\n        var computedStyle = window.getComputedStyle(tick);\n        var calculatedFontSize = computedStyle.fontSize;\n        var calculatedLetterSpacing = computedStyle.letterSpacing;\n        if (calculatedFontSize !== fontSize || calculatedLetterSpacing !== letterSpacing) {\n          setFontSize(calculatedFontSize);\n          setLetterSpacing(calculatedLetterSpacing);\n        }\n      }\n    }\n  }, [fontSize, letterSpacing]);\n  if (hide) {\n    return null;\n  }\n\n  /*\n   * This is different condition from what validateWidthHeight is doing;\n   * the CartesianAxis does allow width or height to be undefined.\n   */\n  if (width != null && width <= 0 || height != null && height <= 0) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: clsx('recharts-cartesian-axis', className),\n    ref: layerRef\n  }, /*#__PURE__*/React.createElement(AxisLine, {\n    x: props.x,\n    y: props.y,\n    width: width,\n    height: height,\n    orientation: props.orientation,\n    mirror: props.mirror,\n    axisLine: axisLine,\n    otherSvgProps: svgPropertiesNoEvents(props)\n  }), /*#__PURE__*/React.createElement(Ticks, {\n    ticks: ticks,\n    tick: props.tick,\n    tickLine: props.tickLine,\n    stroke: props.stroke,\n    tickFormatter: props.tickFormatter,\n    unit: props.unit,\n    padding: props.padding,\n    tickTextProps: props.tickTextProps,\n    orientation: props.orientation,\n    mirror: props.mirror,\n    x: props.x,\n    y: props.y,\n    width: props.width,\n    height: props.height,\n    tickSize: props.tickSize,\n    tickMargin: props.tickMargin,\n    fontSize: fontSize,\n    letterSpacing: letterSpacing,\n    getTicksConfig: props,\n    events: rest\n  }), /*#__PURE__*/React.createElement(CartesianLabelContextProvider, {\n    x: props.x,\n    y: props.y,\n    width: props.width,\n    height: props.height\n  }, /*#__PURE__*/React.createElement(CartesianLabelFromLabelProp, {\n    label: props.label\n  }), props.children));\n});\nvar MemoCartesianAxis = /*#__PURE__*/React.memo(CartesianAxisComponent, (prevProps, nextProps) => {\n  var {\n      viewBox: prevViewBox\n    } = prevProps,\n    prevRestProps = _objectWithoutProperties(prevProps, _excluded2);\n  var {\n      viewBox: nextViewBox\n    } = nextProps,\n    nextRestProps = _objectWithoutProperties(nextProps, _excluded3);\n  return shallowEqual(prevViewBox, nextViewBox) && shallowEqual(prevRestProps, nextRestProps);\n});\nexport var CartesianAxis = /*#__PURE__*/React.forwardRef((outsideProps, ref) => {\n  var props = resolveDefaultProps(outsideProps, defaultCartesianAxisProps);\n  return /*#__PURE__*/React.createElement(MemoCartesianAxis, _extends({}, props, {\n    ref: ref\n  }));\n});\nCartesianAxis.displayName = 'CartesianAxis';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}